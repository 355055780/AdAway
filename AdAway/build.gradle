apply plugin: 'com.android.application'
repositories {
    jcenter()
    google()
}
dependencies {
    implementation 'com.android.support:appcompat-v7:27.1.1'
    implementation 'com.android.support:cardview-v7:27.1.1'
    implementation 'com.android.support.constraint:constraint-layout:1.1.0'
    implementation 'com.android.support:design:27.1.1'
    implementation 'com.android.support:preference-v7:27.1.1'
    implementation 'com.android.support:support-fragment:27.1.1'
    implementation 'com.evernote:android-job:1.2.4'
    implementation project(':libraries:RootCommands')
    implementation 'net.sf.trove4j:trove4j:3.0.3'
    implementation 'org.sufficientlysecure:html-textview:2.0'
    implementation 'org.sufficientlysecure:donations:2.4'
}


def getGitSha1 = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

android {
    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }

    compileSdkVersion 27
    buildToolsVersion '27.0.3'

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 27
        versionCode 40000   // Read 4.00.00 to match version name
        versionName '4.0.0'
        versionNameSuffix '-' + getGitSha1()
    }

    /*
     * To sign release build, create file gradle.properties in ~/.gradle/ with this content:
     *
     * signingStoreLocation=/home/key.store
     * signingStorePassword=xxx
     * signingKeyAlias=alias
     * signingKeyPassword=xxx
     */
    if (project.hasProperty('signingStoreLocation') &&
            project.hasProperty('signingStorePassword') &&
            project.hasProperty('signingKeyAlias') &&
            project.hasProperty('signingKeyPassword')) {
        println "Found signature properties in gradle.properties. Build will be signed."

        signingConfigs {
            release {
                storeFile file(signingStoreLocation)
                storePassword signingStorePassword
                keyAlias signingKeyAlias
                keyPassword signingKeyPassword
            }
        }

        buildTypes.release.signingConfig = signingConfigs.release
    } else {
        buildTypes.release.signingConfig = null
    }

    // Do not abort build if lint finds errors
    lintOptions {
        abortOnError false
    }

    externalNativeBuild {
        ndkBuild {
            path 'jni/Android.mk'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

/**
 * Task to rename executables from hello_world to libhello_world_exec.so
 * If they look like libraries, they are packaged in the apk and deployed on the device in the lib folder!
 *
 * http://www.gradle.org/docs/current/userguide/working_with_files.html
 */
task renameDebugExecutables(type: Sync) {
    from('build/intermediates/ndkBuild/debug/obj/local') {
        rename(/(.+)/, 'lib$1_exec.so')
    }
    into 'libs'

    exclude '*/objs'
    exclude '*/*.a'
}
task renameReleaseExecutables(type: Sync) {
    from('build/intermediates/ndkBuild/release/obj/local') {
        rename(/(.+)/, 'lib$1_exec.so')
    }
    into 'libs'

    exclude '*/objs'
    exclude '*/*.a'
}

gradle.projectsEvaluated {
    if (project.hasProperty('packageDebug')) {
        packageDebug.dependsOn renameDebugExecutables
    }
    if (project.hasProperty('packageRelease')) {
        packageRelease.dependsOn renameReleaseExecutables
    }
}
